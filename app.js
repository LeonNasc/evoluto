// Facilita a confec√ß√£o de evolu√ß√µes

/**
 * 1)Consiste de 4 √°reas: O paciente, A prescri√ß√£o, Os exames, As observa√ß√µes/anota√ß√µes
 *   1.1) Paciente: Motivo interna√ß√£o, Comorbidades(lista?),Alergias, Peso
 *   1.2) A prescri√ß√£o: MUPs, An√°lise do dia(Dieta, HV, ATB, Analgesia,TEV,Gastro,NP)
 *   1.3) Exames laboratoriais: Lista de exames do dia, pr√≥ximos exames
 *   1.4) Observa√ß√µes/Anota√ß√µes: Informa√ß√µes pertinentes, Problemas NPs, Interven√ß√µes, Ajustes
 * 2) Cada uma das √°reas acima √© preenchida a partir de formul√°rios
 *   2.1) Cada √°rea √© uma p√°gina de formul√°rio
 *   2.2) Opcionalmente, pode-se importar uma evolu√ß√£o.
 *    2.2.1) Deve ser capaz de receber evolu√ß√µes e transforma-las no formato editavel
 *    2.2.1.1) Deve ser capaz de receber mais de um modelo de evolu√ß√£o
 * 4) A partir de cada p√°gina de formul√°rio, fazer uma formata√ß√£o √∫nica e retornar texto da evolu√ß√£o
 * opt.1) Pode incluir uma calculadora de Clearance
 * opt.2) Pode marcar medicamentos que necessitem de ajuste (dado uma lista destes)
 */ 
 
 var Leitor = {
  texto_paciente : "" ,
  texto_prescricao: "",
  texto_exames: "",
  texto_obs: "",
  set_texto : function(area, texto){
    switch(area):
	  case 'paciente':
	    texto_paciente = texto
	  break;
	  case 'prescricao':
	    texto_prescricao= texto
	  break;
	  case 'exames':
	    texto_exames = texto
	  break;
	  case 'obs':
	    texto_obs = texto
	  break;
	  default:
	  console.log('Nao ha onde inserir')
	  break;

  },
//O parser È um dos parsers em EvoluParser, adequado para cada area
  ler_formulario: function(form,area,parser){
    let texto = parser(form);
    this.set_texto(area,texto);

    return true
  },
  ler_evolucao: function(evolucao){
    textos = EvoluParser.decifrar_evolucao(evolucao);
    
    //Ordem √ paciente,prescricao,exames,obs
    textos.forEach(function(texto){
	//Cada texto È uma tupla
	Leitor.set_texto(area,texto.texto); 
    });
  }
 }
 
 const EvoluParser = {
   decifrar_evolucao:function(evolu){
     //TODO
   }
   parse_paciente(form){
     //TODO
     let internacao = form.intern.value;
     //Comorbidades pode ser um conjunto de checkboxes, ou um csv
     let comorbidades = form.comorb.value.split(",");
     //Alergias È uma lista contendo todas as alergias do paciente, separadas por virgula
     let alergias = form.alergias.value.split(",");
     let peso = form.peso.value;

     let texto = internacao + "\n" + comorbidades + "\n" + alergias + "\n" + peso

     return Formatador.formatar_texto(texto,txt_formatadores.formatador_paciente)
   }
   parse_prescricao(form){
     //TODO
   }parse_exames(form){
     //TODO
   }
 }

 
 const Escritor = {
   escrever: function(texto){
     
   }
 }
 
 var Formatador ={
  formatar_texto: function(texto,formatador){
    //Formatador √© fun√ß√£o
    return formatador(texto);
  } 
 }
 
 const txt_formatadores = {
   formatador_paciente : function(texto){
     //TODO
   },
   formatador_prescricao : function(texto){
     //TODO
   },
   formatador_exames : function(texto){
     //TODO
   },
   formatador_observa√ß√µes : function(texto){
     //TODO
   },
 }
